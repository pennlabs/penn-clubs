# Generated by Django 5.0.4 on 2025-01-23 18:50

import logging

from django.db import migrations, transaction
from django.db.models import Count


logger = logging.getLogger(__name__)

def merge_duplicate_committees(apps, schema_editor):
    """Merge committees with duplicate names within the same application."""
    ApplicationCommittee = apps.get_model("clubs", "ApplicationCommittee")

    with transaction.atomic():
        # Find committees that have the same name within an application
        duplicate_committees = (
            ApplicationCommittee.objects
            .values("name", "application")
            .annotate(count=Count("id"))
            .filter(count__gt=1)
        )

        for duplicate in duplicate_committees:
            name = duplicate["name"]
            application_id = duplicate["application"]

            committees = (
                ApplicationCommittee.objects
                .filter(name=name, application=application_id)
                .order_by("id")
            )

            # Use the first committee as the primary one to merge into
            primary_committee = committees.first()
            if not primary_committee:
                continue

            logger.info(
                f"Merging duplicate committees with name '{name}' "
                f"in application {application_id}"
            )

            # Merge all other committees into the primary one
            for committee in committees[1:]:
                try:
                    # Reassign questions to primary committee
                    questions_moved = committee.applicationquestion_set.update(
                        committees=primary_committee
                    )
                    logger.info(
                        f"Moved {questions_moved} questions from committee "
                        f"{committee.id} to {primary_committee.id}"
                    )
                    committee.delete()
                except Exception as e:
                    logger.error(
                        f"Failed to merge committee {committee.id} into "
                        f"{primary_committee.id}: {str(e)}"
                    )
                    raise


class Migration(migrations.Migration):

    dependencies = [
        ("clubs", "0117_clubapprovalresponsetemplate"),
    ]

    operations = [
        # First run data migration to merge duplicates
        migrations.RunPython(
            merge_duplicate_committees,
            reverse_code=migrations.RunPython.noop
        ),
        # Then add the constraint
        migrations.AlterUniqueTogether(
            name="applicationcommittee",
            unique_together={("name", "application")},
        ),
    ]
